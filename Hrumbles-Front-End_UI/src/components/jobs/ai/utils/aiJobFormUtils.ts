// src/components/jobs/ai/utils/aiJobFormUtils.ts

import { JobFormData } from "../hooks/useAiJobFormState";
import { JobData } from "@/lib/types";

/**
 * Validates the data for a given step in the AI job creation form.
 * @param step The current step number (1, 2, or 3).
 * @param formData The current state of the form data.
 * @returns `true` if the step is valid, otherwise `false`.
 */
export const validateStep = (step: number, formData: JobFormData): boolean => {
  switch (step) {
    case 1:
      const { jobInformation } = formData;
      return (
        !!jobInformation.jobTitle &&
        !!jobInformation.jobId &&
        jobInformation.jobLocation.length > 0 &&
        jobInformation.numberOfCandidates > 0 &&
        !!jobInformation.hiringMode
      );
    case 2:
      const { experienceSkills } = formData;
      const minExp = experienceSkills.minimumYear * 12 + experienceSkills.minimumMonth;
      const maxExp = experienceSkills.maximumYear * 12 + experienceSkills.maximumMonth;
      return (
        maxExp >= minExp &&
        experienceSkills.skills.length > 0
      );
    case 3:
      const { jobDescription } = formData;
      return jobDescription.description.length >= 100;
    default:
      return false;
  }
};

/**
 * Maps the flat form data from the stepper into the nested JobData structure
 * expected by the backend service.
 * @param formData The final state of the form data.
 * @param organization_id The ID of the current user's organization.
 * @param created_by The ID of the user creating the job.
 * @returns A `JobData` object ready to be sent to the database.
 */
export const mapFormDataToJobData = (
  formData: JobFormData,
  organization_id: string,
  created_by: string
): JobData => {
  const { jobInformation, experienceSkills, jobDescription } = formData;

  return {
    // Basic Info
    title: jobInformation.jobTitle,
    jobId: jobInformation.jobId,
    location: jobInformation.jobLocation,
    hiringMode: jobInformation.hiringMode,
    notice_period: jobInformation.noticePeriod,
    number_of_candidates: jobInformation.numberOfCandidates,

    // Experience and Skills
    experience: {
      minimumYear: experienceSkills.minimumYear,
      minimumMonth: experienceSkills.minimumMonth,
      maximumYear: experienceSkills.maximumYear,
      maximumMonth: experienceSkills.maximumMonth,
    },
    skills: experienceSkills.skills,

    // Description
    description: jobDescription.description,

    // Hardcoded values for this specific "Internal" workflow
    jobType: "Internal",
    status: "OPEN", // Default status

    // System-provided IDs
    organization_id,
    created_by,

    // Default other fields to null or empty as needed by the schema
    id: '', // Will be generated by the database
    createdAt: new Date().toISOString(),
    clientOwner: null,
    clientDetails: null,
    candidate_count: 0,
    submissionType: 'Internal',
    // ... add any other required fields from JobData with default values
  };
};